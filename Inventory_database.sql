create database inventory;
use inventory;

CREATE TABLE customer (
    customer_id int primary key,
    cust_name varchar(30) NOT NULL,
    city varchar(15),
    grade int DEFAULT 0,
    salesman_id int NOT NULL
);
drop table salesman;
CREATE TABLE salesman(
    salesman_id int primary key,
    name varchar(30),
    city varchar(15),
    commission decimal(5,2)
);
drop table orders;
CREATE TABLE orders (
    ord_no decimal(5,0) primary key,
    purch_amt decimal(8,2),
    ord_date date,
    customer_id int,
    salesman_id int
);
alter table orders add foreign key(salesman_id) references salesman(salesman_id);
alter table orders add foreign key(customer_id) references customer(customer_id);


insert into salesman values
(5001,"James Hoog","New York",0.15),
(5002,"Nail Knite","Paris",0.13),
(5005,"Pit Alex","London",0.11),
(5006,"Mc Lyon","Paris",0.14),
(5007,"Paul Adam","Rome",0.13),
(5003,"Lauson Hen","San Jose",0.12);
select * from salesman;
insert into customer values
(3002,"Nick Rimando","New York",100,5001),
(3007,"Brad Davis","New York",200,5001),
(3005,"Graham Zusi","California",200,5002),
(3008,"Julian Green","London",300,5002),
(3004,"Fabian Johnson","Paris",300,5006),
(3009,"Geoff Cameron","Berlin",100,5003),
(3003,"Jozy Altidor","Moscow",200,5007),
(3001,"Brad Guzan","London",null,5005);


insert into orders values
(70009,270.65,'2012-09-10',3001,5005),
(70002,65.26,"2012-10-05",3002,5001),
(70004,110.50,"2012-08-17",3009,5003),
(70005,2400.60,"2012-07-27",3007,5001),
(70008,5760.00,"2012-09-10",3002,5001),
(70010,1983.43,"2012-10-10",3004,5006),
(70003,2480.40,"2012-10-10",3009,5003),
(70011,75.29,"2012-08-17",3003,5007),
(70013,3045.60,"2012-04-25",3002,5001),
(70001,150.50,"2012-10-05",3005,5002),
(70007,948.50,"2012-09-10",	3005,5002),
(70012,250.45,"2012-06-27",	3008,5002);

#https://www.w3resource.com/sql-exercises/subqueries/index.php
# write a SQL query to find all the orders issued by the salesman 'Paul Adam'. 
#Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT *
FROM orders
WHERE salesman_id =
    (SELECT salesman_id 
     FROM salesman 
     WHERE name='Paul Adam');
     
#write a SQL query to find all orders generated by London-based salespeople. 
#Return ord_no, purch_amt, ord_date, customer_id, salesman_id.  
select ord_no, purch_amt, ord_date, customer_id, salesman_id from orders
where salesman_id in (select salesman_id from salesman where city="London" );

#write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 3007. 
#Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select ord_no, purch_amt, ord_date, customer_id, salesman_id from orders
where salesman_id in(select salesman_id from customer where customer_id=3007 );

#write a SQL query to find the purch_amt greater than the average purch_amt of 10th October 2012. 
#Return ord_no, purch_amt, ord_date, customer_id, salesman_id. 
select ord_no, purch_amt, ord_date, customer_id, salesman_id from orders
where purch_amt>(select avg(purch_amt) from orders where ord_date="2012-10-10");

#write a SQL query to find all the orders generated in New York city. 
#Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

select  ord_no, purch_amt, ord_date, customer_id,salesman_id from orders 
where customer_id in (select customer_id from customer where city="New York");
 
#write a SQL query to determine the commission of the salespeople whose customers are in Paris. Return commission.
select commission from salesman where salesman_id in (select salesman_id from customer where city="Paris");

#Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon
SELECT *
FROM customer
WHERE customer_id =
    (SELECT salesman_id -2001
     FROM salesman
     WHERE name = 'Mc Lyon');
     
#write a SQL query to count the number of customers with grades above the average in New York City. 
#Return grade and count.
select * from customer; 
select grade,count(*) from customer group by grade 
having grade>(select avg(grade) from customer where city="New York");

#write a SQL query to find those salespeople who earned the maximum commission. 
#Return ord_no, purch_amt, ord_date, and salesman_id.
select  ord_no, purch_amt, ord_date,salesman_id from orders 
where salesman_id in (select salesman_id from salesman where commission= (select max(commission) from salesman) );

#write a SQL query to find those orders that are equal or higher than the average amount of the orders. 
#Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select avg(purch_amt) from orders;
select ord_no, purch_amt, ord_date, customer_id,salesman_id
from orders a where purch_amt>=(select avg(purch_amt) from orders b );#where b.customer_id=a.customer_id);

#Write a query to find the sums of the amounts from the orders table, grouped by date, 
#and eliminate all dates where the sum was not at least 1000.00 above the maximum order amount for that date
select a.ord_date,sum(purch_amt) from orders a group by ord_date
having sum(purch_amt)>(select max(purch_amt)+1000 from orders b where a.ord_date=b.ord_date );

 #Write a query to extract all data from the customer table if and only if one or more of 
 #the customers in the customer table are located in London
 
 select customer.* from customer where exists(select * from customer where city="London");
 
 #write a SQL query to find salespeople who deal with multiple customers. 
 #Return salesman_id, name, city and commission.
 select salesman_id, name, city,commission from salesman where salesman_id in(select distinct salesman_id
 from customer a where exists(select * from customer b where a.salesman_id=b.salesman_id
 and b.cust_name<>a.cust_name) );

desc customer;
desc salesman;
desc orders;
select * from customer;


#write a SQL query to find the salespeople who deal with those customers who live in the same city.
#Return salesman_id, name, city and commission.
select salesman.* from salesman where city = Any(select city from customer);

#write a SQL query to find salespeople whose place of residence matches any city where customers live. 
#Return salesman_id, name, city and commission.
select salesman.* from salesman where city IN(select city from customer);

#write a SQL query to find all those salespeople whose names appear alphabetically lower than the customerâ€™s name. 
#Return salesman_id, name, city, commission. 
select salesman.* from salesman where name in (select salesman.name from customer
where salesman.name<customer.cust_name);

# this same query u can write like-- 
select salesman.* from salesman where exists (select salesman.name from customer
where salesman.name<customer.cust_name);

# in clause is preferred when there is a small list of static values or inner query returns a very 
#less number of rows. Exists clause is preferred when there is a need to check existence of values in
# another table or when there is a need to check against more than 1 col.

#write a SQL query to calculate the total order amount generated by a salesperson. 
#Salespersons should be from the cities where the customers reside. 
#Return salesperson name, city and total order amount. 

#write a SQL query to find those customers whose grades are different from those living in Paris. 
#Return customer_id, cust_name, city, grade and salesman_id.
SELECT *
FROM customer 
WHERE grade NOT IN
   (SELECT grade
	FROM customer
	WHERE city='Paris');
    


#------------------------------------------joins

#write SQL query to find the customers who placed orders on 17th August 2012. 
#Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name. 

select orders.*, customer.cust_name
from orders,customer where orders.customer_id=customer.customer_id
and orders.ord_date="2012-08-17";


select * from orders;

#write a SQL query to find those orders where the order amount exists between 500 and 2000. 
#Return ord_no, purch_amt, cust_name, city.
select a.ord_no, a.purch_amt, b.cust_name, b.city
from orders a,customer b where a.customer_id=b.customer_id and a.purch_amt between 500 and 2000;

#write a SQL query to find the salesperson(s) and the customer(s) he represents. 
#Return Customer Name, city, Salesman, commission
select customer.cust_name,customer.city, salesman.name, salesman.commission
from customer inner join salesman on customer.salesman_id=salesman.salesman_id;






#-----------------------------self join---------------------

 #write a SQL query to find salespeople who deal with multiple customers. 
 #Return salesman_id, name, city and commission.
 select distinct(a.salesman_id) from customer a,customer b 
 where a.salesman_id=b.salesman_id and a.cust_name<>b.cust_name;
 
 #write a SQL query to find salespeople who deal with a single customer. 
#Return salesman_id, name, city and commission.
select salesman.* from salesman where salesman_id not in
(select distinct(a.salesman_id) from customer a,customer b 
 where a.salesman_id=b.salesman_id and a.cust_name<>b.cust_name);

#write a SQL query to find the salespeople who deal the customers with more than one order. 
#Return salesman_id, name, city and commission
select salesman.* from salesman where salesman_id in (select a.salesman_id from orders a, orders b
where a.salesman_id=b.salesman_id and a.ord_no<>b.ord_no );

#write a SQL query to find the salespeople who deal with those customers who live in the same city.
#Return salesman_id, name, city and commission.
select distinct(salesman.salesman_id) from salesman,customer where salesman.city=customer.city;
# in (select a.salesman_id from customer a,  b where a. ); 

#-------------------------------------joins-----------------------------------
# write a SQL query to find the salesperson and customer who reside in the same city.
#Return Salesman, cust_name and city.
SELECT salesman.name AS "Salesman",
customer.cust_name, customer.city,salesman.city 
FROM salesman, customer 
where salesman.city=customer.city;

SELECT salesman.name AS "Salesman",
customer.cust_name, customer.city,salesman.city 
FROM salesman inner join customer 
on salesman.city=customer.city;

#write a SQL query to find the salesperson(s) and the customer(s) he represents. 
#Return Customer Name, city, Salesman, commission
SELECT salesman.name AS "Salesman",
customer.cust_name "Customer_Name",salesman.commission, customer.city,salesman.city 
FROM salesman inner join customer 
on salesman.salesman_id=customer.salesman_id;

#write a SQL query to find salespeople who received commissions of more than 12 percent from the company. 
#Return Customer Name, customer city, Salesman, commission. 
SELECT salesman.name AS "Salesman",
customer.cust_name "Customer_Name",salesman.commission, customer.city
FROM salesman,customer where salesman.salesman_id=customer.salesman_id and salesman.commission>0.12;


SELECT salesman.name AS "Salesman",
customer.cust_name "Customer_Name",salesman.commission, customer.city
FROM salesman inner join customer on salesman.salesman_id=customer.salesman_id and salesman.commission>0.12;

#SQL query to locate those salespeople who do not live in the same city where their customers live 
#and have received a commission of more than 12% from the company. 
#Return Customer Name, customer city, Salesman, salesman city, commission. 
SELECT salesman.name AS "Salesman",
customer.cust_name "Customer_Name",salesman.commission, customer.city,salesman.city
from salesman inner join customer on salesman.salesman_id=customer.salesman_id where salesman.commission>0.12
and customer.city<>salesman.city;

#write a SQL query to find the details of an order. 
#Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission.
select a.ord_no, a.ord_date, a.purch_amt, b.cust_name, b.grade, c.name, c.commission
from orders a inner join customer b on a.customer_id=b.customer_id inner join salesman c on c.salesman_id=b.salesman_id; 

#Write a SQL statement to join the tables salesman, customer and orders so that the same column
# of each table appears once 
#and only the relational rows are returned.
SELECT * FROM orders NATURAL JOIN customer  NATURAL JOIN salesman;

# write a SQL query to display the customer name, customer city, grade, salesman, salesman city. 
#The results should be sorted by ascending customer_id.
select customer.customer_id,customer.cust_name, customer.city, customer.grade, salesman.name, salesman.city
from customer left join salesman on customer.salesman_id=salesman.salesman_id order by customer_id;

#write a SQL query to find those customers with a grade less than 300. 
#Return cust_name, customer city, grade, Salesman, salesmancity. 
#The result should be ordered by ascending customer_id
select customer.customer_id,customer.cust_name, customer.city, customer.grade, salesman.name, salesman.city
from customer left join salesman on customer.salesman_id=salesman.salesman_id where 
customer.grade<300 order by customer_id;

# Write a SQL statement to make a report with customer name, city, order number, order date, 
# and order amount in ascending order
# according to the order date to determine whether any of the existing customers have placed an order or not. 
select a.ord_date,b.cust_name,b.city,a.ord_no,a.purch_amt
from orders a left join customer b  on a.customer_id=b.customer_id
order by a.ord_date; 

#SQL statement to generate a report with customer name, city, order number, order date, 
#order amount, salesperson name, and commission to determine if any of the existing customers have not placed orders
# or if they have placed orders through their salesman or by themselves.
select a.ord_date,b.cust_name,b.city,a.ord_no,a.purch_amt,c.name,c.commission
from orders a left join customer b on a.customer_id=b.customer_id left join salesman c
on a.salesman_id=c.salesman_id;

#Write a SQL statement to generate a list in ascending order of salespersons who work either 
#for one or more customers 
#or have not yet joined any of the customers.
select salesman.salesman_id from salesman left join customer on 
salesman.salesman_id=customer.salesman_id order by salesman_id;

#Write a SQL query to combine each row of the salesman table with each row of the customer table.
SELECT * 
FROM salesman a 
CROSS JOIN customer b;

#Write a SQL statement to make a Cartesian product between salesman and customer 
#i.e. each salesman will appear for all customers and vice versa for those salesmen 
#who must belong to a city which is not the same as his customer and the customers should have their own grade.
SELECT * 
FROM salesman a 
CROSS JOIN customer b
WHERE a.city IS NOT NULL 
AND b.grade IS NOT NULL 
AND  a.city<>b.city;


#---------------------------joins inside subquery-----------------

#write a SQL query to find orders where the order amount is less than the order amount of a customer 
#residing in London City. 
#Return ord_no, purch_amt, ord_date, customer_id and salesman_id. 
select ord_no, purch_amt, ord_date, customer_id,salesman_id from orders
where purch_amt<Any(select purch_amt from orders,salesman where salesman.salesman_id=orders.salesman_id
and city="London");



#------------------------------views----------------------------
#create a view for those salespeople who belong to the city of New York. 
create view newyorkstaff as select * from salesman where city="New York";
select * from newyorkstaff;

#create a view for all salespersons. Return salesperson ID, name, and city.  
create view salesown as select salesman_id,name,city from salesman;
select * from salesown;

#create a view that counts the number of customers in each grade.  
create view gradecount as select grade,count(customer_id)
from customer group by grade;
select * from gradecount;

CREATE VIEW gradecount1 (grade, number)
AS SELECT grade, COUNT(*)
FROM customer
GROUP BY grade;

# create a view to count the number of unique customers, compute the average and 
#the total purchase amount of customer orders by each date.
drop view totalforday;
create view totalforday(ord_date,count,avg,sum) as select ord_date,count(distinct customer_id),avg(purch_amt),
sum(purch_amt) from orders group by ord_date ;
select * from totalforday;

#create a view to get the salesperson and customer by name. 
#Return order name, purchase amount, salesperson ID, name, customer name.
CREATE VIEW nameorders
AS SELECT ord_no, purch_amt, a.salesman_id, name, cust_name
FROM orders a, customer b, salesman c
WHERE a.customer_id = b.customer_id
AND a.salesman_id = c.salesman_id;
select * from nameorders;

#create a view to find the salesperson who handles a customer who makes the highest order of the day. 
#Return order date, salesperson ID, name.
create view elitesalesman as 
select b.ord_date,a.salesman_id,a.name
from salesman a,orders b
where a.salesman_id=b.salesman_id
and b.purch_amt=(select max(purch_amt) from orders c where c.ord_date=b.ord_date);

#create a view to find the salesperson who deals with the customer with the highest order at least 
#three times per day. Return salesperson ID and name.
drop view incentive;
create view incentive as 
select distinct salesman_id,name from elitesalesman a
where 3<=(select count(*) from elitesalesman b where a.salesman_id=b.salesman_id);
select * from incentive;

#create a view to find the salespersons who issued orders on either August 17th, 2012 or October 10th, 2012. 
#Return salesperson ID, order number and customer ID.
CREATE VIEW sorder
AS SELECT salesman_id, ord_no, customer_id
FROM orders
WHERE ord_date IN('2012-08-17', '2012-10-10');

#The SQL UPDATE VIEW command can be used to modify the data of a view.

#All views are not updatable. So, UPDATE command is not applicable to all views. 
#An updatable view is one which allows performing a UPDATE command on itself without affecting any other table.

#When can a view be updated?
#1. The view is defined based on one and only one table.

#2. The view must include the PRIMARY KEY of the table based upon which the view has been created.

#4. The view must not have any DISTINCT clause in its definition.

#5. The view must not have any GROUP BY or HAVING clause in its definition.

#6. The view must not have any SUBQUERIES in its definitions.

#7. If the view you want to update is based upon another view, the later should be updatable.

#8. Any of the selected output fields (of the view) must not use constants, strings or value expressions.

create view newyorkstaff as select * from salesman where city="New York";
select * from newyorkstaff;
update newyorkstaff set commission=0.20 where city="New York"; #0.15
select * from newyorkstaff;
select * from salesman where city="New York";
update newyorkstaff set commission=0.15 where city="New York"; #0.15
select * from newyorkstaff;
select * from salesman where city="New York";

#When you update a view it affects original table, because SELECT opens an implicit cursor 
#which points to the records from the base table. 
#When ever you update the records it updates the original data since they are pointers to the original.

#------------------indexes--------------
#The indexes are special objects which is built on top of tables. 
#The indexes can do an operation like SELECT, DELETE and UPDATE statement faster to manipulate large amount of data.
#An INDEX is created on columns of a table. One table may contain one or more INDEX tables.
#The INDEX first sorts the data and then it assigns an identification for each row.
#INDEXES are pointers that represent the physical address of a data.
#Alter index ,drop index.

#-----------------triggers-------------
#A trigger is a special type of stored procedure that automatically runs when an event occurs in the database server.
#create trigger [trigger_name] 
#[before | after]  
#{insert | update | delete}  
#on [table_name]  
#[for each row]  
#[trigger_body]  

#create trigger [trigger_name]: Creates or replaces an existing trigger with the trigger_name.
#[before | after]: This specifies when the trigger will be executed.
#{insert | update | delete}: This specifies the DML operation.
#on [table_name]: This specifies the name of the table associated with the trigger.
#[for each row]: This specifies a row-level trigger, i.e., the trigger will be executed for each row being affected.
#[trigger_body]: This provides the operation to be performed as trigger is fired

#Given Student Report Database, in which student marks assessment is recorded. In such schema, 
#create a trigger so that the 
#total and percentage of specified marks is automatically inserted whenever a record is insert.

create table student(
 tid  int(4)  primary key auto_increment,
 name  varchar(30),subj1 int(2),subj2 int(2),subj3 int(2),total int(3),per int(3)  );   
desc student;
drop trigger stud_marks;
create trigger stud_marks before insert on  student
for each row set new.total=new.subj1+new.subj2+new.subj3,
new.per=new.total*0.60; 

insert into student values(0, "ABCDE", 20, 20, 20, 0, 0);
select * from student;

#---------------------------procedure-------
select version();

show privileges;

call order_data();
#In MySQL stored procedures, user variables are referenced with an ampersand (@) prefixed 
#to the user variable name (for example, @x and @y).
call my_procedure_Local_Variables();

call my_proc_IN(2);
select max(purch_amt)  from orders;

call out_p(@M);
select @M as count;

call out_w3(@M);
select @M as count;

# inout-----
call my_proc_inout(@c,"Moscow");
select @c as count;
select * from customer;

call elseif_try(30,30);
call elseif_try(@d,30,40);
select @d;

call elseif_try(@d,-3,40);
select @d;

#-----------------------------------------while

create table jobs(job_id varchar(20),job_title varchar(30),
min_salary int, max_salary int);
insert into jobs(job_id,job_title,
min_salary, max_salary ) values
("AD_PRES","President",20000,40000),
("AD_VP","Administration Vice President",15000,30000),("AD_ASST","Administration Assistant",3000,6000),
("FI_MGR","Finance Manager",8200,16000),
("FI_ACCOUNT","Accountant",4200,9000),
("AC_MGR","Accounting Manager",8200,16000),
("AC_ACCOUNT","Public Accountant",4200,9000),
("SA_MAN","Sales Manager",10000,20000),
("SA_REP","Sales Representative",6000,12000),
("PU_MAN","Purchasing Manager",8000,15000),
("PU_CLERK","Purchasing Clerk",2500,5500),("ST_MAN","Stock Manager",5500,8500),
("ST_CLERK","Stock Clerk",2000,5000),
("SH_CLERK","Shipping Clerk",2500,5500),("IT_PROG" ,"Programmer",4000,10000),
("MK_MAN","Marketing Manager",9000,15000),
("MK_REP","Marketing Representative",4000,9000),
("HR_REP","Human Resources Representative",4000,9000),
("PR_REP","Public Relations Representative",4500,10500); 

select * from jobs;
call my_proc_case(@c,10000);
select @c;

create table num(i int);
call loop_proc(5);
select * from num;

call repeat_proc(10);
select @sum;

call while_procedure(10);
select @sum;

#--------------------------------cursor--------------------

CREATE TABLE GetVatsaCursor(  
  C_ID INT PRIMARY KEY AUTO_INCREMENT,  
  c_name VARCHAR(50),  
  c_address VARCHAR(200)  
);  
  
CREATE TABLE Vbackupdata(  
  C_ID INT,  
  c_name VARCHAR(50),  
  c_address VARCHAR(200)  
); 

INSERT INTO GetVatsaCursor(c_name, c_address) VALUES('Test', '132, Vatsa Colony'),  
  ('Admin', '133, Vatsa Colony'),  
  ('Vatsa', '134, Vatsa Colony'),  
  ('Onkar', '135, Vatsa Colony'),  
  ('Rohit', '136, Vatsa Colony'),  
  ('Simran', '137, Vatsa Colony'),  
  ('Jashmin', '138, Vatsa Colony'),  
  ('Anamika', '139, Vatsa Colony'),  
  ('Radhika', '140, Vatsa Colony'); 
  
SELECT * FROM GetVatsaCursor;  
SELECT * FROM Vbackupdata;

CALL firstCurs();  
SELECT * FROM Vbackupdata; 